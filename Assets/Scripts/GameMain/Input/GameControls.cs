//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/GameMain/Input/GameControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace GameName
{
    public partial class @GameControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""fd49bf4a-36c5-49f0-9dce-b8ed9770e949"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""ab30ba9f-4403-4679-bbf9-41a57402eb56"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""359a9920-c340-463f-9faa-60945ae0497c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftArmStretch"",
                    ""type"": ""Button"",
                    ""id"": ""03d8e518-2447-4c9a-9bf1-de42b0cf1cc0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightArmStretch"",
                    ""type"": ""Button"",
                    ""id"": ""4de52541-9b9e-4b59-9e55-05b18d83825a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftArmHigh"",
                    ""type"": ""Button"",
                    ""id"": ""e166d8cd-6ad8-4cf9-8648-c9f97c02ee3d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightArmHigh"",
                    ""type"": ""Button"",
                    ""id"": ""79705a0a-923c-4da8-856b-ead37eef7a3c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LoseForce"",
                    ""type"": ""Button"",
                    ""id"": ""a10523b3-cc17-4c41-9c7b-7b15b567d8ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Touch"",
                    ""type"": ""Value"",
                    ""id"": ""6f3dcb02-a58e-4e02-aaf2-dc0417483104"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""0e94256b-fdfd-4936-8554-d40ae3e46a63"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""30a2ae46-26dd-4ce5-9f32-fd2b5662e46a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""243e2b55-316d-4179-b531-3c5b3382fb10"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9a3c2048-9f63-4e67-838f-53505f34b7d9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a9e48d0e-6848-4cf7-bf6b-45da3b1f4e45"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""bbcbaed4-425b-45a2-b5c0-bd27c68ac0dd"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf84401b-9253-473a-8b97-6da74e525dff"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""471fae1a-4177-4bf5-be28-69b8f39eec63"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftArmStretch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2ab3bfe3-7b9d-4098-bec6-aa8f916cbaf1"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftArmStretch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c1b5baf-3c94-443c-8ea5-ab7ad94e6453"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightArmStretch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5a80a1d-d825-42f7-8847-ee2ce54c1e8f"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightArmStretch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6580a68d-3fd6-4334-9e1a-6507719d35eb"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftArmHigh"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a9c0d7fd-740d-4f0a-8bf1-51cebeb98a0e"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightArmHigh"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1caaabc3-9799-4240-8322-e4a45dd242df"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LoseForce"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6eeb930d-af87-4706-af66-85d8eb700cac"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
            m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
            m_Player_LeftArmStretch = m_Player.FindAction("LeftArmStretch", throwIfNotFound: true);
            m_Player_RightArmStretch = m_Player.FindAction("RightArmStretch", throwIfNotFound: true);
            m_Player_LeftArmHigh = m_Player.FindAction("LeftArmHigh", throwIfNotFound: true);
            m_Player_RightArmHigh = m_Player.FindAction("RightArmHigh", throwIfNotFound: true);
            m_Player_LoseForce = m_Player.FindAction("LoseForce", throwIfNotFound: true);
            m_Player_Touch = m_Player.FindAction("Touch", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private IPlayerActions m_PlayerActionsCallbackInterface;
        private readonly InputAction m_Player_Movement;
        private readonly InputAction m_Player_Jump;
        private readonly InputAction m_Player_LeftArmStretch;
        private readonly InputAction m_Player_RightArmStretch;
        private readonly InputAction m_Player_LeftArmHigh;
        private readonly InputAction m_Player_RightArmHigh;
        private readonly InputAction m_Player_LoseForce;
        private readonly InputAction m_Player_Touch;
        public struct PlayerActions
        {
            private @GameControls m_Wrapper;
            public PlayerActions(@GameControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_Player_Movement;
            public InputAction @Jump => m_Wrapper.m_Player_Jump;
            public InputAction @LeftArmStretch => m_Wrapper.m_Player_LeftArmStretch;
            public InputAction @RightArmStretch => m_Wrapper.m_Player_RightArmStretch;
            public InputAction @LeftArmHigh => m_Wrapper.m_Player_LeftArmHigh;
            public InputAction @RightArmHigh => m_Wrapper.m_Player_RightArmHigh;
            public InputAction @LoseForce => m_Wrapper.m_Player_LoseForce;
            public InputAction @Touch => m_Wrapper.m_Player_Touch;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                    @Jump.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                    @Jump.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                    @Jump.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJump;
                    @LeftArmStretch.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftArmStretch;
                    @LeftArmStretch.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftArmStretch;
                    @LeftArmStretch.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftArmStretch;
                    @RightArmStretch.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightArmStretch;
                    @RightArmStretch.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightArmStretch;
                    @RightArmStretch.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightArmStretch;
                    @LeftArmHigh.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftArmHigh;
                    @LeftArmHigh.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftArmHigh;
                    @LeftArmHigh.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLeftArmHigh;
                    @RightArmHigh.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightArmHigh;
                    @RightArmHigh.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightArmHigh;
                    @RightArmHigh.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRightArmHigh;
                    @LoseForce.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLoseForce;
                    @LoseForce.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLoseForce;
                    @LoseForce.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLoseForce;
                    @Touch.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTouch;
                    @Touch.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTouch;
                    @Touch.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTouch;
                }
                m_Wrapper.m_PlayerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                    @Jump.started += instance.OnJump;
                    @Jump.performed += instance.OnJump;
                    @Jump.canceled += instance.OnJump;
                    @LeftArmStretch.started += instance.OnLeftArmStretch;
                    @LeftArmStretch.performed += instance.OnLeftArmStretch;
                    @LeftArmStretch.canceled += instance.OnLeftArmStretch;
                    @RightArmStretch.started += instance.OnRightArmStretch;
                    @RightArmStretch.performed += instance.OnRightArmStretch;
                    @RightArmStretch.canceled += instance.OnRightArmStretch;
                    @LeftArmHigh.started += instance.OnLeftArmHigh;
                    @LeftArmHigh.performed += instance.OnLeftArmHigh;
                    @LeftArmHigh.canceled += instance.OnLeftArmHigh;
                    @RightArmHigh.started += instance.OnRightArmHigh;
                    @RightArmHigh.performed += instance.OnRightArmHigh;
                    @RightArmHigh.canceled += instance.OnRightArmHigh;
                    @LoseForce.started += instance.OnLoseForce;
                    @LoseForce.performed += instance.OnLoseForce;
                    @LoseForce.canceled += instance.OnLoseForce;
                    @Touch.started += instance.OnTouch;
                    @Touch.performed += instance.OnTouch;
                    @Touch.canceled += instance.OnTouch;
                }
            }
        }
        public PlayerActions @Player => new PlayerActions(this);
        public interface IPlayerActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnLeftArmStretch(InputAction.CallbackContext context);
            void OnRightArmStretch(InputAction.CallbackContext context);
            void OnLeftArmHigh(InputAction.CallbackContext context);
            void OnRightArmHigh(InputAction.CallbackContext context);
            void OnLoseForce(InputAction.CallbackContext context);
            void OnTouch(InputAction.CallbackContext context);
        }
    }
}
